import logging
import os

import requests
import telebot
from dotenv import load_dotenv
import exceptions
from constants import HI_MESSAGE, WEATHER_EMOJIS, DIRECTIONS_WIND, URL_GEO, URL_WEATHER
load_dotenv()

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
API_TOKEN = os.getenv('API_TOKEN')
TELEGRAM_NAME = os.getenv('TELEGRAM_NAME')

bot = telebot.TeleBot(token=TELEGRAM_TOKEN)

def check_env():
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ .env."""
    secret_token = {
        'TELEGRAM_TOKEN': TELEGRAM_TOKEN,
        'API_TOKEN': API_TOKEN,
        'TELEGRAM_NAME': TELEGRAM_NAME,
    }

    unavailible_tokens = []

    for token_name, token in secret_token.items():
        if token is None:
            unavailible_tokens.append(token_name)
        if len(unavailible_tokens) > 0:
            error_message = (
                '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è:'
                f'{", ".join(unavailible_tokens)}'
            )
            logging.error(error_message)
            raise exceptions.TokenError(error_message)
        else:
            return True

def wind_direction(weather_data):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞."""
    deg_wind_speed = weather_data['wind']['deg']
    direction = int((deg_wind_speed + 22.5) % 360 / 45)
    direction_wind = DIRECTIONS_WIND[direction]
    return direction_wind

def check_availible_api():
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API."""
    try:
        URL = 'http://api.openweathermap.org/'
        response = requests.get(URL)
        if response.status_code != HTTPStatus.OK:
            message_error = f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {response.status_code}'
            logging.error(message_error)
            raise exceptions.RequestResponseError(message_error)
        else:
            response = response.json()
            return response
    except Exception as error:
        logging.error(f'–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API {error}')
        raise exceptions.RequestResponseError(error)

@bot.message_handler(commands=['start'])
def say_hello(message):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    chat = message.chat
    chat_id = chat.id
    bot.send_message(chat_id=chat_id, text=HI_MESSAGE)

@bot.message_handler(content_types=['text'])
def find_city(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É
    –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑.
    """
    text_message = message.text
    chat = message.chat
    chat_id = chat.id
    find_geo(message, text_message)

def find_geo(message, text_message):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ª–≥–æ—Ç—ã –∏ —à–∏—Ä–æ—Ç—ã –≥–æ—Ä–æ–¥–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        url = URL_GEO.format(text_message=text_message, API_TOKEN=API_TOKEN)
        response = requests.get(url).json()
        if not response:
            bot.send_message(message.chat.id,
                             f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ '
                             f'{text_message}. –ü—Ä–æ–≤–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ '
                             f'–ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.')
            return
        lat = response[0]['lat']
        lon = response[0]['lon']
        find_weather(message, lat, lon)
    except Exception as error:
        logging.error(f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ {error}')
        raise exceptions.RequestResponseError(error)

def find_weather(message, lat, lon):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –ø–æ –¥–æ–ª–≥–æ—Ç–µ –∏ —à–∏—Ä–æ—Ç–µ."""
    try:
        url = URL_WEATHER.format(lat=lat, lon=lon, API_TOKEN=API_TOKEN)
        weather_data = requests.get(url).json()
        city = weather_data['name']
        country = weather_data['sys']['country']
        temperature = weather_data['main']['temp']
        feels_like = weather_data['main']['feels_like']
        weather_icon = weather_data['weather'][0]['icon']
        weather_desc = weather_data['weather'][0]['description']
        humidity = weather_data['main']['humidity']
        pressure = weather_data['main']['pressure']
        wind_speed = weather_data['wind']['speed']
        direction_wind = wind_direction(weather_data)

        weather_report = (
            f'–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ {city}, —Å—Ç—Ä–∞–Ω–∞({country}):\n'
            f'üå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n'
            f' {WEATHER_EMOJIS[weather_icon]}–°–æ—Å—Ç–æ—è–Ω–∏–µ: {weather_desc.capitalize()}\n'
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üìâ –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞\n"
            f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n"
            f'üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {direction_wind.capitalize()}\n'
        )
        chat = message.chat
        chat_id = chat.id
        bot.send_message(chat_id=chat_id, text=weather_report)

    except Exception as error:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {error}')
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É.")


bot.polling(10)
def main():
    check_env()
    pass


if __name__ == '__main__':
    main()
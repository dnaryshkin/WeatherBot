import logging
import os

import requests
import telebot
from dotenv import load_dotenv
import exceptions
from message import HI_MESSAGE, WEATHER_EMOJIS

load_dotenv()

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
API_TOKEN = os.getenv('API_TOKEN')
TELEGRAM_NAME = os.getenv('TELEGRAM_NAME')

bot = telebot.TeleBot(token=TELEGRAM_TOKEN)

def check_env():
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ .env."""
    secret_token = {
        'TELEGRAM_TOKEN': TELEGRAM_TOKEN,
        'API_TOKEN': API_TOKEN,
        'TELEGRAM_NAME': TELEGRAM_NAME,
    }

    unavailible_tokens = []

    for token_name, token in secret_token.items():
        if token is None:
            unavailible_tokens.append(token_name)
        if len(unavailible_tokens) > 0:
            error_message = (
                '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è:'
                f'{", ".join(unavailible_tokens)}'
            )
            logging.error(error_message)
            raise exceptions.TokenError(error_message)
        else:
            return True


def check_availible_api():
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API."""
    pass

@bot.message_handler(commands=['start'])
def say_hello(message):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    chat = message.chat
    chat_id = chat.id
    bot.send_message(chat_id=chat_id, text=HI_MESSAGE)

@bot.message_handler(content_types=['text'])
def find_city(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É
    –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑.
    """
    text_message = message.text
    chat = message.chat
    chat_id = chat.id
    find_geo(message, text_message)

def find_geo(message, text_message):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ª–≥–æ—Ç—ã –∏ —à–∏—Ä–æ—Ç—ã –≥–æ—Ä–æ–¥–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    URL = (f'http://api.openweathermap.org/geo/1.0/direct?q={text_message}'
           f'&appid={API_TOKEN}')
    response = requests.get(URL).json()
    lat = response[0]['lat']
    lon = response[0]['lon']
    print(lat, lon)
    find_weather(message, lat, lon)

def find_weather(message, lat, lon):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –ø–æ –¥–æ–ª–≥–æ—Ç–µ –∏ —à–∏—Ä–æ—Ç–µ."""
    URL = (f'https://api.openweathermap.org/data/2.5/weather?lat={lat}'
           f'&lon={lon}&lang=ru&appid={API_TOKEN}&units=metric')
    weather_data = requests.get(URL).json()
    city = weather_data['name']
    country = weather_data['sys']['country']
    temperature = weather_data['main']['temp']
    feels_like = weather_data['main']['feels_like']
    weather_icon = weather_data['weather'][0]['icon']
    weather_desc = weather_data['weather'][0]['description']
    humidity = weather_data['main']['humidity']
    pressure = weather_data['main']['pressure']
    wind_speed = weather_data['wind']['speed']
    deg_wind_speed = weather_data['wind']['deg']

    weather_report = (
        f'–ü–æ–≥–æ–¥–∞ –≤ {city}, —Å—Ç—Ä–∞–Ω–∞({country}):\n'
        f'üå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n'
        f' {WEATHER_EMOJIS[weather_icon]}–°–æ—Å—Ç–æ—è–Ω–∏–µ: {weather_desc.capitalize()}\n'
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
        f"üéö –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞\n"
        f"üå¨ –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å"
    )
    chat = message.chat
    chat_id = chat.id
    bot.send_message(chat_id=chat_id, text=weather_report)



bot.polling(10)
def main():
    check_env()
    pass


if __name__ == '__main__':
    main()
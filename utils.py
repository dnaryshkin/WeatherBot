import logging
import os
from http import HTTPStatus

import requests
from dotenv import load_dotenv

import exceptions
from constants import DIRECTIONS_WIND, WEATHER_EMOJIS, ENDPOINT

load_dotenv()

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
API_TOKEN = os.getenv('API_TOKEN')
TELEGRAM_NAME = os.getenv('TELEGRAM_NAME')


def check_env():
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ .env."""
    secret_token = {
        'TELEGRAM_TOKEN': TELEGRAM_TOKEN,
        'API_TOKEN': API_TOKEN,
        'TELEGRAM_NAME': TELEGRAM_NAME,
    }

    unavailible_tokens = []

    for token_name, token in secret_token.items():
        if token is None:
            unavailible_tokens.append(token_name)
        if len(unavailible_tokens) > 0:
            error_message = (
                '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è:'
                f'{", ".join(unavailible_tokens)}'
            )
            logging.error(error_message)
            raise exceptions.TokenError(error_message)

        logging.info('–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã!')
        return True


def wind_direction(weather_data):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞."""
    deg_wind_speed = weather_data['wind']['deg']
    direction = int((deg_wind_speed + 22.5) % 360 / 45)
    direction_wind = DIRECTIONS_WIND[direction]
    return direction_wind


def check_availible_api():
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API."""
    try:
        response = requests.get(ENDPOINT.format(API_key=API_TOKEN))
        if response.status_code != HTTPStatus.OK:
            message_error = f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {response.status_code}'
            logging.error(message_error)
            raise exceptions.RequestResponseError(message_error)
        else:
            response = response.json()
            logging.info('API –¥–æ—Å—Ç—É–ø–Ω–æ!')
            return response
    except Exception as error:
        logging.error(f'–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API {error}')
        raise exceptions.RequestResponseError(error)


def report_weather_generation(response):
    """–§—É–Ω–∫—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã."""
    city = response['name']
    country = response['sys']['country']
    temperature = response['main']['temp']
    feels_like = response['main']['feels_like']
    weather_icon = response['weather'][0]['icon']
    weather_desc = response['weather'][0]['description']
    humidity = response['main']['humidity']
    pressure = response['main']['pressure']
    wind_speed = response['wind']['speed']
    direction_wind = wind_direction(response)

    weather_report = (
        f'–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ {city}, —Å—Ç—Ä–∞–Ω–∞({country}):\n'
        f'üå°Ô∏è–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n'
        f'{WEATHER_EMOJIS[weather_icon]}–°–æ—Å—Ç–æ—è–Ω–∏–µ: '
        f'{weather_desc.capitalize()}\n'
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
        f"üìâ –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞\n"
        f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n"
        f'üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: {direction_wind.capitalize()}\n'
    )
    return weather_report
